name: Squid Base Image Publish CI

on:
  push:
    branches:
      - master

jobs:
  generate_version_information:
    name: Generate Version and Timestamp Information
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set-versions.outputs.versions }}
      latest_version: ${{ steps.set-latest.outputs.latest_version }}
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate versions dynamically
        id: set-versions
        run: |
          # Find all numerical subdirectories in the squid directory
          versions=$(find squid -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | grep -E '^[0-9]+$' | sort -n | jq -R . | jq -s -c .)
          if [ -z "$versions" ] || [ "$versions" = "[]" ]; then
            echo "No valid subdirectories found. Exiting."
            exit 1
          fi
          echo "Versions: $versions"
          echo "versions=$versions" >> $GITHUB_OUTPUT
      - name: Determine latest version
        id: set-latest
        run: |
          # Find the highest numerical subdirectory
          latest_version=$(find squid -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | grep -E '^[0-9]+$' | sort -n | tail -1)
          echo "Latest version: $latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
      - name: Generate timestamp
        id: timestamp
        run: |
          # Generate a timestamp in the format YYYYMMDD-HHMMSS
          rundate=$(date -u +"%Y%m%d")
          echo "Timestamp: $timestamp"
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
  build:
    name: Build Architecture-Specific Images
    needs: generate_version_information
    strategy:
      matrix:
        architecture: [amd64, arm64]
        squid_version: ${{ fromJson(needs.generate_version_information.outputs.versions) }}
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Build and push architecture-specific image
        uses: docker/build-push-action@v6
        with:
          context: ./squid/${{ matrix.squid_version }}
          file: ./squid/${{ matrix.squid_version }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/squid:${{ matrix.squid_version }}-${{ matrix.architecture }}
            ghcr.io/${{ github.repository_owner }}/squid:${{ matrix.squid_version }}-${{ needs.generate_version_information.outputs.timestamp}}-${{ matrix.architecture }}
            ghcr.io/${{ github.repository_owner }}/squid:${{ matrix.squid_version }}-${{ matrix.architecture }}-${{ needs.generate_version_information.outputs.latest_version == matrix.squid_version && 'latest-' || '' }}${{ matrix.architecture }}

  create_manifest:
    name: Create Multi-Architecture Manifest
    needs: 
      - build
      - generate_version_information
    runs-on: ubuntu-latest
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-architecture manifest
        run: |
          # Use the timestamp from the generate_version_information job
          timestamp="${{ needs.generate_version_information.outputs.timestamp }}"

          for version in $(echo '${{ needs.generate_version_information.outputs.versions }}' | jq -r '.[]'); do
            # Version manifest
            docker manifest create \
              ghcr.io/${{ github.repository_owner }}/squid:$version \
              ghcr.io/${{ github.repository_owner }}/squid:$version-amd64 \
              ghcr.io/${{ github.repository_owner }}/squid:$version-arm64

            docker manifest push ghcr.io/${{ github.repository_owner }}/squid:$version

            # Timestamp manifest
            docker manifest create \
              ghcr.io/${{ github.repository_owner }}/squid:$version-$timestamp \
              ghcr.io/${{ github.repository_owner }}/squid:$version-$timestamp-amd64 \
              ghcr.io/${{ github.repository_owner }}/squid:$version-$timestamp-arm64

            docker manifest push ghcr.io/${{ github.repository_owner }}/squid:$version-$timestamp
          done

          # Latest manifest
          if [ "${{ needs.generate_version_information.outputs.latest_version }}" != "" ]; then
            docker manifest create \
              ghcr.io/${{ github.repository_owner }}/squid:latest \
              ghcr.io/${{ github.repository_owner }}/squid:${{ needs.generate_version_information.outputs.latest_version }}-amd64 \
              ghcr.io/${{ github.repository_owner }}/squid:${{ needs.generate_version_information.outputs.latest_version }}-arm64

            docker manifest push ghcr.io/${{ github.repository_owner }}/squid:latest
          fi
